
VL6180x_C_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003254  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003400  08003400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003408  08003408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  0800341c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  0800341c  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b56  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b2  00000000  00000000  00029b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015626  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088e0  00000000  00000000  00041c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008365e  00000000  00000000  0004a4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002538  00000000  00000000  000cdbd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033d0 	.word	0x080033d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080033d0 	.word	0x080033d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <VL6180x_init>:
 *      Author: keita
 */

#include "VL6180x_c.h"

void VL6180x_init(VL6180x* DataStruct,I2C_HandleTypeDef hi2c,uint8_t address) {
 80004d4:	b084      	sub	sp, #16
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	f107 0014 	add.w	r0, r7, #20
 80004e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	//Input I2C setting
	DataStruct->hi2cx=hi2c;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	2254      	movs	r2, #84	; 0x54
 80004f0:	4619      	mov	r1, r3
 80004f2:	f002 ff59 	bl	80033a8 <memcpy>
	DataStruct->address=address;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80004fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//initialize variable
	DataStruct->data=0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	DataStruct->data_16=0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	DataStruct->distance=0;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	DataStruct->alsCalculated=0.0f;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f04f 0200 	mov.w	r2, #0
 800051e:	65da      	str	r2, [r3, #92]	; 0x5c


    /* REGISTER_TUNING_SR03_270514_CustomerView.txt */
	VL6180x_setRegister(DataStruct,VL6180X_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
 8000520:	2200      	movs	r2, #0
 8000522:	2116      	movs	r1, #22
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f955 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0207, 0x01);
 800052a:	2201      	movs	r2, #1
 800052c:	f240 2107 	movw	r1, #519	; 0x207
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f94f 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0208, 0x01);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 7102 	mov.w	r1, #520	; 0x208
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f949 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0096, 0x00);
 8000542:	2200      	movs	r2, #0
 8000544:	2196      	movs	r1, #150	; 0x96
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f944 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0097, 0xfd);
 800054c:	22fd      	movs	r2, #253	; 0xfd
 800054e:	2197      	movs	r1, #151	; 0x97
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f93f 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00e3, 0x00);
 8000556:	2200      	movs	r2, #0
 8000558:	21e3      	movs	r1, #227	; 0xe3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f93a 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00e4, 0x04);
 8000560:	2204      	movs	r2, #4
 8000562:	21e4      	movs	r1, #228	; 0xe4
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f935 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00e5, 0x02);
 800056a:	2202      	movs	r2, #2
 800056c:	21e5      	movs	r1, #229	; 0xe5
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f930 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00e6, 0x01);
 8000574:	2201      	movs	r2, #1
 8000576:	21e6      	movs	r1, #230	; 0xe6
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f92b 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00e7, 0x03);
 800057e:	2203      	movs	r2, #3
 8000580:	21e7      	movs	r1, #231	; 0xe7
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f926 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00f5, 0x02);
 8000588:	2202      	movs	r2, #2
 800058a:	21f5      	movs	r1, #245	; 0xf5
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f921 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00d9, 0x05);
 8000592:	2205      	movs	r2, #5
 8000594:	21d9      	movs	r1, #217	; 0xd9
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f91c 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00db, 0xce);
 800059c:	22ce      	movs	r2, #206	; 0xce
 800059e:	21db      	movs	r1, #219	; 0xdb
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f917 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00dc, 0x03);
 80005a6:	2203      	movs	r2, #3
 80005a8:	21dc      	movs	r1, #220	; 0xdc
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f912 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00dd, 0xf8);
 80005b0:	22f8      	movs	r2, #248	; 0xf8
 80005b2:	21dd      	movs	r1, #221	; 0xdd
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f90d 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x009f, 0x00);
 80005ba:	2200      	movs	r2, #0
 80005bc:	219f      	movs	r1, #159	; 0x9f
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f908 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00a3, 0x3c);
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	21a3      	movs	r1, #163	; 0xa3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f903 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00b7, 0x00);
 80005ce:	2200      	movs	r2, #0
 80005d0:	21b7      	movs	r1, #183	; 0xb7
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f8fe 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00bb, 0x3c);
 80005d8:	223c      	movs	r2, #60	; 0x3c
 80005da:	21bb      	movs	r1, #187	; 0xbb
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f8f9 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00b2, 0x09);
 80005e2:	2209      	movs	r2, #9
 80005e4:	21b2      	movs	r1, #178	; 0xb2
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8f4 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00ca, 0x09);
 80005ec:	2209      	movs	r2, #9
 80005ee:	21ca      	movs	r1, #202	; 0xca
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f8ef 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0198, 0x01);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f8e9 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x01b0, 0x17);
 8000602:	2217      	movs	r2, #23
 8000604:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f8e3 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x01ad, 0x00);
 800060e:	2200      	movs	r2, #0
 8000610:	f240 11ad 	movw	r1, #429	; 0x1ad
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f8dd 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x00ff, 0x05);
 800061a:	2205      	movs	r2, #5
 800061c:	21ff      	movs	r1, #255	; 0xff
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f8d8 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0100, 0x05);
 8000624:	2205      	movs	r2, #5
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f8d2 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0199, 0x05);
 8000630:	2205      	movs	r2, #5
 8000632:	f240 1199 	movw	r1, #409	; 0x199
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f8cc 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x01a6, 0x1b);
 800063c:	221b      	movs	r2, #27
 800063e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f8c6 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x01ac, 0x3e);
 8000648:	223e      	movs	r2, #62	; 0x3e
 800064a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f8c0 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x01a7, 0x1f);
 8000654:	221f      	movs	r2, #31
 8000656:	f240 11a7 	movw	r1, #423	; 0x1a7
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f8ba 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0030, 0x00);
 8000660:	2200      	movs	r2, #0
 8000662:	2130      	movs	r1, #48	; 0x30
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f8b5 	bl	80007d4 <VL6180x_setRegister>

    /* Recommended : Public registers - See data sheet for more detail */
    VL6180x_setRegister(DataStruct,0x0011, 0x10); /* Enables polling for New Sample ready when measurement completes */
 800066a:	2210      	movs	r2, #16
 800066c:	2111      	movs	r1, #17
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f8b0 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x010a, 0x30);/* Set the averaging sample period (compromise between lower noise and increased execution time) */
 8000674:	2230      	movs	r2, #48	; 0x30
 8000676:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f8aa 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x003f, 0x46);/* Sets the light and dark gain (upper nibble). Dark gain should not be changed.*/
 8000680:	2246      	movs	r2, #70	; 0x46
 8000682:	213f      	movs	r1, #63	; 0x3f
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f8a5 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0031, 0xFF);/* sets the # of range measurements after which auto calibration of system is performed */
 800068a:	22ff      	movs	r2, #255	; 0xff
 800068c:	2131      	movs	r1, #49	; 0x31
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f8a0 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0040, 0x63);/* Set ALS integration time to 100ms */
 8000694:	2263      	movs	r2, #99	; 0x63
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f89b 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x002e, 0x01);/* perform a single temperature calibration of the ranging sensor */
 800069e:	2201      	movs	r2, #1
 80006a0:	212e      	movs	r1, #46	; 0x2e
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f896 	bl	80007d4 <VL6180x_setRegister>

    /* Optional: Public registers - See data sheet for more detail */
    VL6180x_setRegister(DataStruct,0x001b, 0x09); /* Set default ranging inter-measurement period to 100ms */
 80006a8:	2209      	movs	r2, #9
 80006aa:	211b      	movs	r1, #27
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f891 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x003e, 0x31); /* Set default ALS inter-measurement period to 500ms */
 80006b2:	2231      	movs	r2, #49	; 0x31
 80006b4:	213e      	movs	r1, #62	; 0x3e
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f88c 	bl	80007d4 <VL6180x_setRegister>
    VL6180x_setRegister(DataStruct,0x0014, 0x24); /* Configures interrupt on New sample ready */
 80006bc:	2224      	movs	r2, #36	; 0x24
 80006be:	2114      	movs	r1, #20
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f887 	bl	80007d4 <VL6180x_setRegister>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr

080006d4 <changeAddress>:
  temp->idDate =DataStruct->data_16;
  VL6180x_getRegister16bit(DataStruct,VL6180X_IDENTIFICATION_TIME_1);
  temp->idTime =DataStruct->data_16;
}

uint8_t changeAddress(VL6180x* DataStruct, uint8_t new_address){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]

  //NOTICE:  IT APPEARS THAT CHANGING THE ADDRESS IS NOT STORED IN NON-VOLATILE MEMORY
  // POWER CYCLING THE DEVICE REVERTS ADDRESS BACK TO 0X29

  if( DataStruct->address == new_address) return DataStruct->address;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <changeAddress+0x20>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006f2:	e01c      	b.n	800072e <changeAddress+0x5a>
  if( new_address > 127) return DataStruct->address;
 80006f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da03      	bge.n	8000704 <changeAddress+0x30>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000702:	e014      	b.n	800072e <changeAddress+0x5a>

   VL6180x_setRegister(DataStruct,VL6180X_I2C_SLAVE_DEVICE_ADDRESS, new_address);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	461a      	mov	r2, r3
 8000708:	f240 2112 	movw	r1, #530	; 0x212
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f861 	bl	80007d4 <VL6180x_setRegister>
 // mbed needs the new address
   DataStruct->address=new_address<<1;
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   VL6180x_getRegister(DataStruct,VL6180X_I2C_SLAVE_DEVICE_ADDRESS);
 800071e:	f240 2112 	movw	r1, #530	; 0x212
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f000 f826 	bl	8000774 <VL6180x_getRegister>
   return DataStruct->data;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <getDistance>:


void getDistance(VL6180x* DataStruct) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]

  VL6180x_setRegister(DataStruct,VL6180X_SYSRANGE_START, 0x01); //Start Single shot mode
 800073e:	2201      	movs	r2, #1
 8000740:	2118      	movs	r1, #24
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f846 	bl	80007d4 <VL6180x_setRegister>
  HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f000 fbaf 	bl	8000eac <HAL_Delay>
  VL6180x_getRegister(DataStruct,VL6180X_RESULT_RANGE_VAL);
 800074e:	2162      	movs	r1, #98	; 0x62
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f80f 	bl	8000774 <VL6180x_getRegister>
  DataStruct->distance = DataStruct->data;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  VL6180x_setRegister(DataStruct,VL6180X_SYSTEM_INTERRUPT_CLEAR, 0x07);
 8000762:	2207      	movs	r2, #7
 8000764:	2115      	movs	r1, #21
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f834 	bl	80007d4 <VL6180x_setRegister>

}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <VL6180x_getRegister>:
  //return alsCalculated;
}


inline void VL6180x_getRegister(VL6180x* DataStruct,uint16_t registerAddr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af02      	add	r7, sp, #8
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
  uint8_t data_write[2];
  uint8_t data_read[1];
  data_write[0] = (registerAddr >> 8) & 0xFF; //MSB of register address
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	0a1b      	lsrs	r3, r3, #8
 8000784:	b29b      	uxth	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	733b      	strb	r3, [r7, #12]
  data_write[1] = registerAddr & 0xFF; //LSB of register address
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&DataStruct->hi2cx, DataStruct->address, data_write, 2, 300);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000798:	b299      	uxth	r1, r3
 800079a:	f107 020c 	add.w	r2, r7, #12
 800079e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2302      	movs	r3, #2
 80007a6:	f000 ff5d 	bl	8001664 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&DataStruct->hi2cx, DataStruct->address, data_read, 1, 300);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80007b2:	b299      	uxth	r1, r3
 80007b4:	f107 0208 	add.w	r2, r7, #8
 80007b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	f001 f84e 	bl	8001860 <HAL_I2C_Master_Receive>

  //Read Data from selected register
  DataStruct->data=data_read[0];
 80007c4:	7a3a      	ldrb	r2, [r7, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <VL6180x_setRegister>:
  DataStruct->data_16 = (data_high << 8)|data_low;

}

inline void VL6180x_setRegister(VL6180x* DataStruct,uint16_t registerAddr, uint8_t data)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	4613      	mov	r3, r2
 80007e2:	707b      	strb	r3, [r7, #1]
    uint8_t data_write[3];
    data_write[0] = (registerAddr >> 8) & 0xFF; //MSB of register address
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	733b      	strb	r3, [r7, #12]
    data_write[1] = registerAddr & 0xFF; //LSB of register address
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	737b      	strb	r3, [r7, #13]
    data_write[2] = data & 0xFF;
 80007f4:	787b      	ldrb	r3, [r7, #1]
 80007f6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&DataStruct->hi2cx, DataStruct->address, data_write, 3, 300);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000800:	b299      	uxth	r1, r3
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2303      	movs	r3, #3
 800080e:	f000 ff29 	bl	8001664 <HAL_I2C_Master_Transmit>
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0xd0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a25      	ldr	r2, [pc, #148]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <MX_GPIO_Init+0xd4>)
 80008a8:	f000 fd8a 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_GPIO_Init+0xd8>)
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_GPIO_Init+0xdc>)
 80008c2:	f000 fbfb 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0xd4>)
 80008de:	f000 fbed 	bl	80010bc <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	10210000 	.word	0x10210000
 80008f8:	40020800 	.word	0x40020800

080008fc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_I2C3_Init+0x50>)
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <MX_I2C3_Init+0x54>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_I2C3_Init+0x50>)
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_I2C3_Init+0x58>)
 800090a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_I2C3_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_I2C3_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_I2C3_Init+0x50>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_I2C3_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_I2C3_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_I2C3_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_I2C3_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_I2C3_Init+0x50>)
 800093a:	f000 fd5b 	bl	80013f4 <HAL_I2C_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000944:	f000 f938 	bl	8000bb8 <Error_Handler>
  }

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	200000f8 	.word	0x200000f8
 8000950:	40005c00 	.word	0x40005c00
 8000954:	000186a0 	.word	0x000186a0

08000958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <HAL_I2C_MspInit+0xc0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14a      	bne.n	8000a10 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009c4:	2304      	movs	r3, #4
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <HAL_I2C_MspInit+0xc8>)
 80009d0:	f000 fb74 	bl	80010bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80009e4:	2309      	movs	r3, #9
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <HAL_I2C_MspInit+0xcc>)
 80009f0:	f000 fb64 	bl	80010bc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 80009fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_I2C_MspInit+0xc4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40005c00 	.word	0x40005c00
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b095      	sub	sp, #84	; 0x54
 8000a2c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 f9cb 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f855 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f7ff fef1 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a3a:	f000 f929 	bl	8000c90 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000a3e:	f7ff ff5d 	bl	80008fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2120      	movs	r1, #32
 8000a46:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <main+0x98>)
 8000a48:	f000 fcba 	bl	80013c0 <HAL_GPIO_WritePin>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <main+0x9c>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <main+0x9c>)
 8000a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a56:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <main+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <main+0xa0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <main+0xa0>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]

  VL6180x_init(&vl6180x,hi2c3,VL6180X_SLAVE_ADDRESS<<1);
 8000a6a:	4c18      	ldr	r4, [pc, #96]	; (8000acc <main+0xa4>)
 8000a6c:	2352      	movs	r3, #82	; 0x52
 8000a6e:	9312      	str	r3, [sp, #72]	; 0x48
 8000a70:	4668      	mov	r0, sp
 8000a72:	f104 030c 	add.w	r3, r4, #12
 8000a76:	2248      	movs	r2, #72	; 0x48
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f002 fc95 	bl	80033a8 <memcpy>
 8000a7e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000a82:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <main+0xa8>)
 8000a84:	f7ff fd26 	bl	80004d4 <VL6180x_init>
  changeAddress(&vl6180x,0x30);
 8000a88:	2130      	movs	r1, #48	; 0x30
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <main+0xa8>)
 8000a8c:	f7ff fe22 	bl	80006d4 <changeAddress>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  start = DWT->CYCCNT;   // 開始時サイクル数
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <main+0xa0>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <main+0xac>)
 8000a96:	6013      	str	r3, [r2, #0]
	  //ivar[0] = start;       // 計測した�?処�?
	  getDistance(&vl6180x);
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <main+0xa8>)
 8000a9a:	f7ff fe4c 	bl	8000736 <getDistance>
	  HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 fa03 	bl	8000eac <HAL_Delay>
	  //distance=vl6180x.distance;
	  stop = DWT->CYCCNT;    // 終�?時サイクル数
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <main+0xa0>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <main+0xb0>)
 8000aac:	6013      	str	r3, [r2, #0]
	  cnt[0] = stop - start; // 処�?にかかったサイクル数
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <main+0xb0>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <main+0xac>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <main+0xb4>)
 8000aba:	6013      	str	r3, [r2, #0]
	  start = DWT->CYCCNT;   // 開始時サイクル数
 8000abc:	e7e8      	b.n	8000a90 <main+0x68>
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	e000edf0 	.word	0xe000edf0
 8000ac8:	e0001000 	.word	0xe0001000
 8000acc:	200000f8 	.word	0x200000f8
 8000ad0:	2000014c 	.word	0x2000014c
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	2000002c 	.word	0x2000002c
 8000adc:	20000030 	.word	0x20000030

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fc65 	bl	80033be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <SystemClock_Config+0xd4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <SystemClock_Config+0xd4>)
 8000b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <SystemClock_Config+0xd4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b54:	2310      	movs	r3, #16
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b62:	2307      	movs	r3, #7
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fbcc 	bl	8002308 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b76:	f000 f81f 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fe26 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ba2:	f000 f809 	bl	8000bb8 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3750      	adds	r7, #80	; 0x50
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <Error_Handler+0x6>

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f000 fa28 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f906 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <SystemInit+0x28>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <SystemInit+0x28>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SystemInit+0x28>)
 8000c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART2_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f001 ff80 	bl	8002bcc <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f7ff ff71 	bl	8000bb8 <Error_Handler>
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001ac 	.word	0x200001ac
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_UART_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12b      	bne.n	8000d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_UART_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x8c>)
 8000d5a:	f000 f9af 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d7a:	e003      	b.n	8000d84 <LoopCopyDataInit>

08000d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d82:	3104      	adds	r1, #4

08000d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d8c:	d3f6      	bcc.n	8000d7c <CopyDataInit>
  ldr  r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d90:	e002      	b.n	8000d98 <LoopFillZerobss>

08000d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d94:	f842 3b04 	str.w	r3, [r2], #4

08000d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d9c:	d3f9      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ff61 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f002 fadd 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fe3f 	bl	8000a28 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000db0:	08003410 	.word	0x08003410
  ldr  r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000dbc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000dc0:	200001f0 	.word	0x200001f0

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f92f 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fee0 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f939 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f90f 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200001ec 	.word	0x200001ec

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200001ec 	.word	0x200001ec

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_Delay+0x40>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff5c 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb0 	bl	8001010 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e159      	b.n	800138c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8148 	bne.w	8001386 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00b      	beq.n	8001116 <HAL_GPIO_Init+0x5a>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110a:	2b11      	cmp	r3, #17
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d130      	bne.n	8001178 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0xfc>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a2 	beq.w	8001386 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2e4>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <HAL_GPIO_Init+0x2e4>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2e4>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <HAL_GPIO_Init+0x2e8>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2ec>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x202>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2f0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1fe>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2f4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1fa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a45      	ldr	r2, [pc, #276]	; (80013b4 <HAL_GPIO_Init+0x2f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1f6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_GPIO_Init+0x2fc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1f2>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x204>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_GPIO_Init+0x2e8>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <HAL_GPIO_Init+0x300>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <HAL_GPIO_Init+0x300>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_GPIO_Init+0x300>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a23      	ldr	r2, [pc, #140]	; (80013bc <HAL_GPIO_Init+0x300>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_GPIO_Init+0x300>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_GPIO_Init+0x300>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_GPIO_Init+0x300>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_GPIO_Init+0x300>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f aea2 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e11f      	b.n	8001646 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fa9c 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001458:	f001 fb90 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 800145c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a7b      	ldr	r2, [pc, #492]	; (8001650 <HAL_I2C_Init+0x25c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d807      	bhi.n	8001478 <HAL_I2C_Init+0x84>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <HAL_I2C_Init+0x260>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	e006      	b.n	8001486 <HAL_I2C_Init+0x92>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a77      	ldr	r2, [pc, #476]	; (8001658 <HAL_I2C_Init+0x264>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0db      	b.n	8001646 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a72      	ldr	r2, [pc, #456]	; (800165c <HAL_I2C_Init+0x268>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a64      	ldr	r2, [pc, #400]	; (8001650 <HAL_I2C_Init+0x25c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d802      	bhi.n	80014c8 <HAL_I2C_Init+0xd4>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e009      	b.n	80014dc <HAL_I2C_Init+0xe8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4a63      	ldr	r2, [pc, #396]	; (8001660 <HAL_I2C_Init+0x26c>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	3301      	adds	r3, #1
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4956      	ldr	r1, [pc, #344]	; (8001650 <HAL_I2C_Init+0x25c>)
 80014f8:	428b      	cmp	r3, r1
 80014fa:	d80d      	bhi.n	8001518 <HAL_I2C_Init+0x124>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e59      	subs	r1, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fbb1 f3f3 	udiv	r3, r1, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	bf38      	it	cc
 8001514:	2304      	movcc	r3, #4
 8001516:	e04f      	b.n	80015b8 <HAL_I2C_Init+0x1c4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d111      	bne.n	8001544 <HAL_I2C_Init+0x150>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e012      	b.n	800156a <HAL_I2C_Init+0x176>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	0099      	lsls	r1, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x17e>
 800156e:	2301      	movs	r3, #1
 8001570:	e022      	b.n	80015b8 <HAL_I2C_Init+0x1c4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10e      	bne.n	8001598 <HAL_I2C_Init+0x1a4>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1e58      	subs	r0, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	fbb0 f3f3 	udiv	r3, r0, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001596:	e00f      	b.n	80015b8 <HAL_I2C_Init+0x1c4>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	0099      	lsls	r1, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6911      	ldr	r1, [r2, #16]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	000186a0 	.word	0x000186a0
 8001654:	001e847f 	.word	0x001e847f
 8001658:	003d08ff 	.word	0x003d08ff
 800165c:	431bde83 	.word	0x431bde83
 8001660:	10624dd3 	.word	0x10624dd3

08001664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	460b      	mov	r3, r1
 8001672:	817b      	strh	r3, [r7, #10]
 8001674:	4613      	mov	r3, r2
 8001676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fc0c 	bl	8000e94 <HAL_GetTick>
 800167c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	f040 80e0 	bne.w	800184c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2319      	movs	r3, #25
 8001692:	2201      	movs	r2, #1
 8001694:	4970      	ldr	r1, [pc, #448]	; (8001858 <HAL_I2C_Master_Transmit+0x1f4>)
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fc58 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e0d3      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_I2C_Master_Transmit+0x50>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0cc      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d007      	beq.n	80016da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2221      	movs	r2, #33	; 0x21
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2210      	movs	r2, #16
 80016f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	893a      	ldrh	r2, [r7, #8]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_I2C_Master_Transmit+0x1f8>)
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800171c:	8979      	ldrh	r1, [r7, #10]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fac2 	bl	8001cac <I2C_MasterRequestWrite>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e08d      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001748:	e066      	b.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	6a39      	ldr	r1, [r7, #32]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fcd2 	bl	80020f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2b04      	cmp	r3, #4
 8001760:	d107      	bne.n	8001772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06b      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d11b      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x188>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d017      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fcc2 	bl	800217a <I2C_WaitOnBTFFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00d      	beq.n	8001818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2b04      	cmp	r3, #4
 8001802:	d107      	bne.n	8001814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e01a      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d194      	bne.n	800174a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00100002 	.word	0x00100002
 800185c:	ffff0000 	.word	0xffff0000

08001860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
 8001870:	4613      	mov	r3, r2
 8001872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fb0e 	bl	8000e94 <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	f040 820b 	bne.w	8001c9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	497c      	ldr	r1, [pc, #496]	; (8001a84 <HAL_I2C_Master_Receive+0x224>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fb5a 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	e1fe      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2C_Master_Receive+0x50>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e1f7      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d007      	beq.n	80018d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2222      	movs	r2, #34	; 0x22
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2210      	movs	r2, #16
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_I2C_Master_Receive+0x228>)
 8001916:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fa46 	bl	8001db0 <I2C_MasterRequestRead>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1b8      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d113      	bne.n	800195e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e18c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	2b01      	cmp	r3, #1
 8001964:	d11b      	bne.n	800199e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e16c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d11b      	bne.n	80019de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	e14c      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a04:	e138      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	f200 80f1 	bhi.w	8001bf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d123      	bne.n	8001a60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fbed 	bl	80021fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e139      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a5e:	e10b      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d14e      	bne.n	8001b06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <HAL_I2C_Master_Receive+0x22c>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa6a 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e10e      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
 8001a82:	bf00      	nop
 8001a84:	00100002 	.word	0x00100002
 8001a88:	ffff0000 	.word	0xffff0000
 8001a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b04:	e0b8      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4966      	ldr	r1, [pc, #408]	; (8001ca8 <HAL_I2C_Master_Receive+0x448>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fa1b 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0bf      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	2200      	movs	r2, #0
 8001b6a:	494f      	ldr	r1, [pc, #316]	; (8001ca8 <HAL_I2C_Master_Receive+0x448>)
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f9ed 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e091      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf0:	e042      	b.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fb00 	bl	80021fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e04c      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d118      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aec2 	bne.w	8001a06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	00010004 	.word	0x00010004

08001cac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d006      	beq.n	8001cd6 <I2C_MasterRequestWrite+0x2a>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d003      	beq.n	8001cd6 <I2C_MasterRequestWrite+0x2a>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cd4:	d108      	bne.n	8001ce8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e00b      	b.n	8001d00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d107      	bne.n	8001d00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f91d 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d103      	bne.n	8001d30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e035      	b.n	8001da0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d3c:	d108      	bne.n	8001d50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	e01b      	b.n	8001d88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	11db      	asrs	r3, r3, #7
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f003 0306 	and.w	r3, r3, #6
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f063 030f 	orn	r3, r3, #15
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <I2C_MasterRequestWrite+0xfc>)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f943 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e010      	b.n	8001da0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <I2C_MasterRequestWrite+0x100>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f933 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	00010008 	.word	0x00010008
 8001dac:	00010002 	.word	0x00010002

08001db0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d006      	beq.n	8001dea <I2C_MasterRequestRead+0x3a>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d003      	beq.n	8001dea <I2C_MasterRequestRead+0x3a>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de8:	d108      	bne.n	8001dfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00b      	b.n	8001e14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	2b11      	cmp	r3, #17
 8001e02:	d107      	bne.n	8001e14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f893 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3a:	d103      	bne.n	8001e44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e079      	b.n	8001f3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e50:	d108      	bne.n	8001e64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	e05f      	b.n	8001f24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e64:	897b      	ldrh	r3, [r7, #10]
 8001e66:	11db      	asrs	r3, r3, #7
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f003 0306 	and.w	r3, r3, #6
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f063 030f 	orn	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4930      	ldr	r1, [pc, #192]	; (8001f44 <I2C_MasterRequestRead+0x194>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f8b9 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e054      	b.n	8001f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4929      	ldr	r1, [pc, #164]	; (8001f48 <I2C_MasterRequestRead+0x198>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f8a9 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e044      	b.n	8001f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f831 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d103      	bne.n	8001f08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e017      	b.n	8001f3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	11db      	asrs	r3, r3, #7
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 0306 	and.w	r3, r3, #6
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f063 030e 	orn	r3, r3, #14
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <I2C_MasterRequestRead+0x198>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f865 	bl	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010008 	.word	0x00010008
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f5c:	e025      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d021      	beq.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7fe ff95 	bl	8000e94 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e023      	b.n	8001ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10d      	bne.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	e00c      	b.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d0b6      	beq.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002008:	e051      	b.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002018:	d123      	bne.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f043 0204 	orr.w	r2, r3, #4
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e046      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d021      	beq.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206a:	f7fe ff13 	bl	8000e94 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d116      	bne.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e020      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10c      	bne.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf14      	ite	ne
 80020ca:	2301      	movne	r3, #1
 80020cc:	2300      	moveq	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	e00b      	b.n	80020ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	43da      	mvns	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4013      	ands	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d18d      	bne.n	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002104:	e02d      	b.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f8ce 	bl	80022a8 <I2C_IsAcknowledgeFailed>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e02d      	b.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d021      	beq.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe feb9 	bl	8000e94 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d116      	bne.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d1ca      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002186:	e02d      	b.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f88d 	bl	80022a8 <I2C_IsAcknowledgeFailed>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e02d      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d021      	beq.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7fe fe78 	bl	8000e94 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e007      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d1ca      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002208:	e042      	b.n	8002290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b10      	cmp	r3, #16
 8002216:	d119      	bne.n	800224c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0210 	mvn.w	r2, #16
 8002220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e029      	b.n	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7fe fe22 	bl	8000e94 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	429a      	cmp	r2, r3
 800225a:	d302      	bcc.n	8002262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e007      	b.n	80022a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d1b5      	bne.n	800220a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022be:	d11b      	bne.n	80022f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e25b      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d075      	beq.n	8002412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	4ba3      	ldr	r3, [pc, #652]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b04      	cmp	r3, #4
 8002330:	d00c      	beq.n	800234c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4ba0      	ldr	r3, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d112      	bne.n	8002364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233e:	4b9d      	ldr	r3, [pc, #628]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d10b      	bne.n	8002364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	4b99      	ldr	r3, [pc, #612]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05b      	beq.n	8002410 <HAL_RCC_OscConfig+0x108>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d157      	bne.n	8002410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e236      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x74>
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a90      	ldr	r2, [pc, #576]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xb0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a8a      	ldr	r2, [pc, #552]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a87      	ldr	r2, [pc, #540]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xb0>
 80023a0:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a83      	ldr	r2, [pc, #524]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a80      	ldr	r2, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd68 	bl	8000e94 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fd64 	bl	8000e94 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1fb      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xc0>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd54 	bl	8000e94 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fd50 	bl	8000e94 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e1e7      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0xe8>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002432:	2b08      	cmp	r3, #8
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x152>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1bb      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4952      	ldr	r1, [pc, #328]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_OscConfig+0x2b0>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fd09 	bl	8000e94 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe fd05 	bl	8000e94 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e19c      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4940      	ldr	r1, [pc, #256]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x2b0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fce8 	bl	8000e94 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fce4 	bl	8000e94 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e17b      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d030      	beq.n	8002554 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_RCC_OscConfig+0x2b4>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fcc8 	bl	8000e94 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fcc4 	bl	8000e94 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e15b      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x200>
 8002526:	e015      	b.n	8002554 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x2b4>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fcb1 	bl	8000e94 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe fcad 	bl	8000e94 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e144      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a0 	beq.w	80026a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x2b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_RCC_OscConfig+0x2b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <HAL_RCC_OscConfig+0x2b8>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7fe fc73 	bl	8000e94 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e011      	b.n	80025d6 <HAL_RCC_OscConfig+0x2ce>
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470000 	.word	0x42470000
 80025bc:	42470e80 	.word	0x42470e80
 80025c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fc66 	bl	8000e94 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0fd      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b81      	ldr	r3, [pc, #516]	; (80027dc <HAL_RCC_OscConfig+0x4d4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
 80025ea:	4b7d      	ldr	r3, [pc, #500]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a7c      	ldr	r2, [pc, #496]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	e01c      	b.n	8002632 <HAL_RCC_OscConfig+0x32a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 8002600:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a76      	ldr	r2, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	4b74      	ldr	r3, [pc, #464]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	e00b      	b.n	8002632 <HAL_RCC_OscConfig+0x32a>
 800261a:	4b71      	ldr	r3, [pc, #452]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a70      	ldr	r2, [pc, #448]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a6d      	ldr	r2, [pc, #436]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d015      	beq.n	8002666 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fc2b 	bl	8000e94 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fc27 	bl	8000e94 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0bc      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCC_OscConfig+0x33a>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe fc15 	bl	8000e94 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fc11 	bl	8000e94 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	; 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0a6      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8092 	beq.w	80027d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d05c      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d141      	bne.n	8002744 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <HAL_RCC_OscConfig+0x4dc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fbe5 	bl	8000e94 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fbe1 	bl	8000e94 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e078      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	019b      	lsls	r3, r3, #6
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	4933      	ldr	r1, [pc, #204]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fbba 	bl	8000e94 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fbb6 	bl	8000e94 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04d      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x41c>
 8002742:	e045      	b.n	80027d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fba3 	bl	8000e94 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fb9f 	bl	8000e94 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e036      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x44a>
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e029      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	429a      	cmp	r2, r3
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d115      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10d      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40007000 	.word	0x40007000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470060 	.word	0x42470060

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fadc 	bl	8000e94 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fad8 	bl	8000e94 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f821 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002972:	4601      	mov	r1, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	fa21 f303 	lsr.w	r3, r1, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fa3c 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	080033e8 	.word	0x080033e8
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d007      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x32>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d008      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x38>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 80b4 	bne.w	8002b48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029e2:	60bb      	str	r3, [r7, #8]
       break;
 80029e4:	e0b3      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e6:	4b5e      	ldr	r3, [pc, #376]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029e8:	60bb      	str	r3, [r7, #8]
      break;
 80029ea:	e0b0      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04a      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	f04f 0400 	mov.w	r4, #0
 8002a0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	ea03 0501 	and.w	r5, r3, r1
 8002a18:	ea04 0602 	and.w	r6, r4, r2
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4632      	mov	r2, r6
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f04f 0400 	mov.w	r4, #0
 8002a28:	0154      	lsls	r4, r2, #5
 8002a2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a2e:	014b      	lsls	r3, r1, #5
 8002a30:	4619      	mov	r1, r3
 8002a32:	4622      	mov	r2, r4
 8002a34:	1b49      	subs	r1, r1, r5
 8002a36:	eb62 0206 	sbc.w	r2, r2, r6
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f04f 0400 	mov.w	r4, #0
 8002a42:	0194      	lsls	r4, r2, #6
 8002a44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a48:	018b      	lsls	r3, r1, #6
 8002a4a:	1a5b      	subs	r3, r3, r1
 8002a4c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	00e2      	lsls	r2, r4, #3
 8002a5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a5e:	00d9      	lsls	r1, r3, #3
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	195b      	adds	r3, r3, r5
 8002a66:	eb44 0406 	adc.w	r4, r4, r6
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	0262      	lsls	r2, r4, #9
 8002a74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a78:	0259      	lsls	r1, r3, #9
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	4621      	mov	r1, r4
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f04f 0400 	mov.w	r4, #0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	f7fd fba2 	bl	80001d4 <__aeabi_uldivmod>
 8002a90:	4603      	mov	r3, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e049      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	f04f 0400 	mov.w	r4, #0
 8002aa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	ea03 0501 	and.w	r5, r3, r1
 8002aae:	ea04 0602 	and.w	r6, r4, r2
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	0154      	lsls	r4, r2, #5
 8002ac0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ac4:	014b      	lsls	r3, r1, #5
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4622      	mov	r2, r4
 8002aca:	1b49      	subs	r1, r1, r5
 8002acc:	eb62 0206 	sbc.w	r2, r2, r6
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	f04f 0400 	mov.w	r4, #0
 8002ad8:	0194      	lsls	r4, r2, #6
 8002ada:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	1a5b      	subs	r3, r3, r1
 8002ae2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	00e2      	lsls	r2, r4, #3
 8002af0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002af4:	00d9      	lsls	r1, r3, #3
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	195b      	adds	r3, r3, r5
 8002afc:	eb44 0406 	adc.w	r4, r4, r6
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	02a2      	lsls	r2, r4, #10
 8002b0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b0e:	0299      	lsls	r1, r3, #10
 8002b10:	460b      	mov	r3, r1
 8002b12:	4614      	mov	r4, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	4621      	mov	r1, r4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f04f 0400 	mov.w	r4, #0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	f7fd fb57 	bl	80001d4 <__aeabi_uldivmod>
 8002b26:	4603      	mov	r3, r0
 8002b28:	460c      	mov	r4, r1
 8002b2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	3301      	adds	r3, #1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	60bb      	str	r3, [r7, #8]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b4a:	60bb      	str	r3, [r7, #8]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	007a1200 	.word	0x007a1200

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b80:	f7ff fff0 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b84:	4601      	mov	r1, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	080033f8 	.word	0x080033f8

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	f7ff ffdc 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bac:	4601      	mov	r1, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0b5b      	lsrs	r3, r3, #13
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	080033f8 	.word	0x080033f8

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03f      	b.n	8002c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f876 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f829 	bl	8002c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002caa:	f023 030c 	bic.w	r3, r3, #12
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd6:	f040 818b 	bne.w	8002ff0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4ac1      	ldr	r2, [pc, #772]	; (8002fe4 <UART_SetConfig+0x37c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d005      	beq.n	8002cf0 <UART_SetConfig+0x88>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4abf      	ldr	r2, [pc, #764]	; (8002fe8 <UART_SetConfig+0x380>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 80bd 	bne.w	8002e6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cf0:	f7ff ff58 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	f04f 0600 	mov.w	r6, #0
 8002cfe:	46a8      	mov	r8, r5
 8002d00:	46b1      	mov	r9, r6
 8002d02:	eb18 0308 	adds.w	r3, r8, r8
 8002d06:	eb49 0409 	adc.w	r4, r9, r9
 8002d0a:	4698      	mov	r8, r3
 8002d0c:	46a1      	mov	r9, r4
 8002d0e:	eb18 0805 	adds.w	r8, r8, r5
 8002d12:	eb49 0906 	adc.w	r9, r9, r6
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d2a:	4688      	mov	r8, r1
 8002d2c:	4691      	mov	r9, r2
 8002d2e:	eb18 0005 	adds.w	r0, r8, r5
 8002d32:	eb49 0106 	adc.w	r1, r9, r6
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	f04f 0600 	mov.w	r6, #0
 8002d40:	196b      	adds	r3, r5, r5
 8002d42:	eb46 0406 	adc.w	r4, r6, r6
 8002d46:	461a      	mov	r2, r3
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f7fd fa43 	bl	80001d4 <__aeabi_uldivmod>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	461a      	mov	r2, r3
 8002d54:	4ba5      	ldr	r3, [pc, #660]	; (8002fec <UART_SetConfig+0x384>)
 8002d56:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	461d      	mov	r5, r3
 8002d64:	f04f 0600 	mov.w	r6, #0
 8002d68:	46a9      	mov	r9, r5
 8002d6a:	46b2      	mov	sl, r6
 8002d6c:	eb19 0309 	adds.w	r3, r9, r9
 8002d70:	eb4a 040a 	adc.w	r4, sl, sl
 8002d74:	4699      	mov	r9, r3
 8002d76:	46a2      	mov	sl, r4
 8002d78:	eb19 0905 	adds.w	r9, r9, r5
 8002d7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d94:	4689      	mov	r9, r1
 8002d96:	4692      	mov	sl, r2
 8002d98:	eb19 0005 	adds.w	r0, r9, r5
 8002d9c:	eb4a 0106 	adc.w	r1, sl, r6
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	461d      	mov	r5, r3
 8002da6:	f04f 0600 	mov.w	r6, #0
 8002daa:	196b      	adds	r3, r5, r5
 8002dac:	eb46 0406 	adc.w	r4, r6, r6
 8002db0:	461a      	mov	r2, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	f7fd fa0e 	bl	80001d4 <__aeabi_uldivmod>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b8b      	ldr	r3, [pc, #556]	; (8002fec <UART_SetConfig+0x384>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	; 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a86      	ldr	r2, [pc, #536]	; (8002fec <UART_SetConfig+0x384>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de0:	4498      	add	r8, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	461d      	mov	r5, r3
 8002de6:	f04f 0600 	mov.w	r6, #0
 8002dea:	46a9      	mov	r9, r5
 8002dec:	46b2      	mov	sl, r6
 8002dee:	eb19 0309 	adds.w	r3, r9, r9
 8002df2:	eb4a 040a 	adc.w	r4, sl, sl
 8002df6:	4699      	mov	r9, r3
 8002df8:	46a2      	mov	sl, r4
 8002dfa:	eb19 0905 	adds.w	r9, r9, r5
 8002dfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e16:	4689      	mov	r9, r1
 8002e18:	4692      	mov	sl, r2
 8002e1a:	eb19 0005 	adds.w	r0, r9, r5
 8002e1e:	eb4a 0106 	adc.w	r1, sl, r6
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	196b      	adds	r3, r5, r5
 8002e2e:	eb46 0406 	adc.w	r4, r6, r6
 8002e32:	461a      	mov	r2, r3
 8002e34:	4623      	mov	r3, r4
 8002e36:	f7fd f9cd 	bl	80001d4 <__aeabi_uldivmod>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <UART_SetConfig+0x384>)
 8002e42:	fba3 1302 	umull	r1, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	3332      	adds	r3, #50	; 0x32
 8002e54:	4a65      	ldr	r2, [pc, #404]	; (8002fec <UART_SetConfig+0x384>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 0207 	and.w	r2, r3, #7
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4442      	add	r2, r8
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e26f      	b.n	800334a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e6a:	f7ff fe87 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8002e6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	461d      	mov	r5, r3
 8002e74:	f04f 0600 	mov.w	r6, #0
 8002e78:	46a8      	mov	r8, r5
 8002e7a:	46b1      	mov	r9, r6
 8002e7c:	eb18 0308 	adds.w	r3, r8, r8
 8002e80:	eb49 0409 	adc.w	r4, r9, r9
 8002e84:	4698      	mov	r8, r3
 8002e86:	46a1      	mov	r9, r4
 8002e88:	eb18 0805 	adds.w	r8, r8, r5
 8002e8c:	eb49 0906 	adc.w	r9, r9, r6
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ea0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ea4:	4688      	mov	r8, r1
 8002ea6:	4691      	mov	r9, r2
 8002ea8:	eb18 0005 	adds.w	r0, r8, r5
 8002eac:	eb49 0106 	adc.w	r1, r9, r6
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	f04f 0600 	mov.w	r6, #0
 8002eba:	196b      	adds	r3, r5, r5
 8002ebc:	eb46 0406 	adc.w	r4, r6, r6
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f7fd f986 	bl	80001d4 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <UART_SetConfig+0x384>)
 8002ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	461d      	mov	r5, r3
 8002ede:	f04f 0600 	mov.w	r6, #0
 8002ee2:	46a9      	mov	r9, r5
 8002ee4:	46b2      	mov	sl, r6
 8002ee6:	eb19 0309 	adds.w	r3, r9, r9
 8002eea:	eb4a 040a 	adc.w	r4, sl, sl
 8002eee:	4699      	mov	r9, r3
 8002ef0:	46a2      	mov	sl, r4
 8002ef2:	eb19 0905 	adds.w	r9, r9, r5
 8002ef6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f0e:	4689      	mov	r9, r1
 8002f10:	4692      	mov	sl, r2
 8002f12:	eb19 0005 	adds.w	r0, r9, r5
 8002f16:	eb4a 0106 	adc.w	r1, sl, r6
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	461d      	mov	r5, r3
 8002f20:	f04f 0600 	mov.w	r6, #0
 8002f24:	196b      	adds	r3, r5, r5
 8002f26:	eb46 0406 	adc.w	r4, r6, r6
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	f7fd f951 	bl	80001d4 <__aeabi_uldivmod>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <UART_SetConfig+0x384>)
 8002f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2164      	movs	r1, #100	; 0x64
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	3332      	adds	r3, #50	; 0x32
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <UART_SetConfig+0x384>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f5a:	4498      	add	r8, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	461d      	mov	r5, r3
 8002f60:	f04f 0600 	mov.w	r6, #0
 8002f64:	46a9      	mov	r9, r5
 8002f66:	46b2      	mov	sl, r6
 8002f68:	eb19 0309 	adds.w	r3, r9, r9
 8002f6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002f70:	4699      	mov	r9, r3
 8002f72:	46a2      	mov	sl, r4
 8002f74:	eb19 0905 	adds.w	r9, r9, r5
 8002f78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f90:	4689      	mov	r9, r1
 8002f92:	4692      	mov	sl, r2
 8002f94:	eb19 0005 	adds.w	r0, r9, r5
 8002f98:	eb4a 0106 	adc.w	r1, sl, r6
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	f04f 0600 	mov.w	r6, #0
 8002fa6:	196b      	adds	r3, r5, r5
 8002fa8:	eb46 0406 	adc.w	r4, r6, r6
 8002fac:	461a      	mov	r2, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	f7fd f910 	bl	80001d4 <__aeabi_uldivmod>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <UART_SetConfig+0x384>)
 8002fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	2164      	movs	r1, #100	; 0x64
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3332      	adds	r3, #50	; 0x32
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <UART_SetConfig+0x384>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	f003 0207 	and.w	r2, r3, #7
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4442      	add	r2, r8
 8002fe0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fe2:	e1b2      	b.n	800334a <UART_SetConfig+0x6e2>
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4ad7      	ldr	r2, [pc, #860]	; (8003354 <UART_SetConfig+0x6ec>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d005      	beq.n	8003006 <UART_SetConfig+0x39e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4ad6      	ldr	r2, [pc, #856]	; (8003358 <UART_SetConfig+0x6f0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	f040 80d1 	bne.w	80031a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003006:	f7ff fdcd 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 800300a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	469a      	mov	sl, r3
 8003010:	f04f 0b00 	mov.w	fp, #0
 8003014:	46d0      	mov	r8, sl
 8003016:	46d9      	mov	r9, fp
 8003018:	eb18 0308 	adds.w	r3, r8, r8
 800301c:	eb49 0409 	adc.w	r4, r9, r9
 8003020:	4698      	mov	r8, r3
 8003022:	46a1      	mov	r9, r4
 8003024:	eb18 080a 	adds.w	r8, r8, sl
 8003028:	eb49 090b 	adc.w	r9, r9, fp
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003038:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800303c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003040:	4688      	mov	r8, r1
 8003042:	4691      	mov	r9, r2
 8003044:	eb1a 0508 	adds.w	r5, sl, r8
 8003048:	eb4b 0609 	adc.w	r6, fp, r9
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4619      	mov	r1, r3
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f04f 0400 	mov.w	r4, #0
 800305e:	0094      	lsls	r4, r2, #2
 8003060:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003064:	008b      	lsls	r3, r1, #2
 8003066:	461a      	mov	r2, r3
 8003068:	4623      	mov	r3, r4
 800306a:	4628      	mov	r0, r5
 800306c:	4631      	mov	r1, r6
 800306e:	f7fd f8b1 	bl	80001d4 <__aeabi_uldivmod>
 8003072:	4603      	mov	r3, r0
 8003074:	460c      	mov	r4, r1
 8003076:	461a      	mov	r2, r3
 8003078:	4bb8      	ldr	r3, [pc, #736]	; (800335c <UART_SetConfig+0x6f4>)
 800307a:	fba3 2302 	umull	r2, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	469b      	mov	fp, r3
 8003088:	f04f 0c00 	mov.w	ip, #0
 800308c:	46d9      	mov	r9, fp
 800308e:	46e2      	mov	sl, ip
 8003090:	eb19 0309 	adds.w	r3, r9, r9
 8003094:	eb4a 040a 	adc.w	r4, sl, sl
 8003098:	4699      	mov	r9, r3
 800309a:	46a2      	mov	sl, r4
 800309c:	eb19 090b 	adds.w	r9, r9, fp
 80030a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b8:	4689      	mov	r9, r1
 80030ba:	4692      	mov	sl, r2
 80030bc:	eb1b 0509 	adds.w	r5, fp, r9
 80030c0:	eb4c 060a 	adc.w	r6, ip, sl
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	0094      	lsls	r4, r2, #2
 80030d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030dc:	008b      	lsls	r3, r1, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	4631      	mov	r1, r6
 80030e6:	f7fd f875 	bl	80001d4 <__aeabi_uldivmod>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b9a      	ldr	r3, [pc, #616]	; (800335c <UART_SetConfig+0x6f4>)
 80030f2:	fba3 1302 	umull	r1, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2164      	movs	r1, #100	; 0x64
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a95      	ldr	r2, [pc, #596]	; (800335c <UART_SetConfig+0x6f4>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	4498      	add	r8, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	469b      	mov	fp, r3
 8003116:	f04f 0c00 	mov.w	ip, #0
 800311a:	46d9      	mov	r9, fp
 800311c:	46e2      	mov	sl, ip
 800311e:	eb19 0309 	adds.w	r3, r9, r9
 8003122:	eb4a 040a 	adc.w	r4, sl, sl
 8003126:	4699      	mov	r9, r3
 8003128:	46a2      	mov	sl, r4
 800312a:	eb19 090b 	adds.w	r9, r9, fp
 800312e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800313e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003146:	4689      	mov	r9, r1
 8003148:	4692      	mov	sl, r2
 800314a:	eb1b 0509 	adds.w	r5, fp, r9
 800314e:	eb4c 060a 	adc.w	r6, ip, sl
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4619      	mov	r1, r3
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	0094      	lsls	r4, r2, #2
 8003166:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800316a:	008b      	lsls	r3, r1, #2
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	4628      	mov	r0, r5
 8003172:	4631      	mov	r1, r6
 8003174:	f7fd f82e 	bl	80001d4 <__aeabi_uldivmod>
 8003178:	4603      	mov	r3, r0
 800317a:	460c      	mov	r4, r1
 800317c:	461a      	mov	r2, r3
 800317e:	4b77      	ldr	r3, [pc, #476]	; (800335c <UART_SetConfig+0x6f4>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a72      	ldr	r2, [pc, #456]	; (800335c <UART_SetConfig+0x6f4>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4442      	add	r2, r8
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	e0d0      	b.n	800334a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7ff fce8 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80031ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	469a      	mov	sl, r3
 80031b2:	f04f 0b00 	mov.w	fp, #0
 80031b6:	46d0      	mov	r8, sl
 80031b8:	46d9      	mov	r9, fp
 80031ba:	eb18 0308 	adds.w	r3, r8, r8
 80031be:	eb49 0409 	adc.w	r4, r9, r9
 80031c2:	4698      	mov	r8, r3
 80031c4:	46a1      	mov	r9, r4
 80031c6:	eb18 080a 	adds.w	r8, r8, sl
 80031ca:	eb49 090b 	adc.w	r9, r9, fp
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031e2:	4688      	mov	r8, r1
 80031e4:	4691      	mov	r9, r2
 80031e6:	eb1a 0508 	adds.w	r5, sl, r8
 80031ea:	eb4b 0609 	adc.w	r6, fp, r9
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4619      	mov	r1, r3
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f04f 0400 	mov.w	r4, #0
 8003200:	0094      	lsls	r4, r2, #2
 8003202:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003206:	008b      	lsls	r3, r1, #2
 8003208:	461a      	mov	r2, r3
 800320a:	4623      	mov	r3, r4
 800320c:	4628      	mov	r0, r5
 800320e:	4631      	mov	r1, r6
 8003210:	f7fc ffe0 	bl	80001d4 <__aeabi_uldivmod>
 8003214:	4603      	mov	r3, r0
 8003216:	460c      	mov	r4, r1
 8003218:	461a      	mov	r2, r3
 800321a:	4b50      	ldr	r3, [pc, #320]	; (800335c <UART_SetConfig+0x6f4>)
 800321c:	fba3 2302 	umull	r2, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	469b      	mov	fp, r3
 800322a:	f04f 0c00 	mov.w	ip, #0
 800322e:	46d9      	mov	r9, fp
 8003230:	46e2      	mov	sl, ip
 8003232:	eb19 0309 	adds.w	r3, r9, r9
 8003236:	eb4a 040a 	adc.w	r4, sl, sl
 800323a:	4699      	mov	r9, r3
 800323c:	46a2      	mov	sl, r4
 800323e:	eb19 090b 	adds.w	r9, r9, fp
 8003242:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800325a:	4689      	mov	r9, r1
 800325c:	4692      	mov	sl, r2
 800325e:	eb1b 0509 	adds.w	r5, fp, r9
 8003262:	eb4c 060a 	adc.w	r6, ip, sl
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4619      	mov	r1, r3
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	0094      	lsls	r4, r2, #2
 800327a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800327e:	008b      	lsls	r3, r1, #2
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	4628      	mov	r0, r5
 8003286:	4631      	mov	r1, r6
 8003288:	f7fc ffa4 	bl	80001d4 <__aeabi_uldivmod>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	461a      	mov	r2, r3
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <UART_SetConfig+0x6f4>)
 8003294:	fba3 1302 	umull	r1, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	2164      	movs	r1, #100	; 0x64
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	3332      	adds	r3, #50	; 0x32
 80032a6:	4a2d      	ldr	r2, [pc, #180]	; (800335c <UART_SetConfig+0x6f4>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b2:	4498      	add	r8, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	469b      	mov	fp, r3
 80032b8:	f04f 0c00 	mov.w	ip, #0
 80032bc:	46d9      	mov	r9, fp
 80032be:	46e2      	mov	sl, ip
 80032c0:	eb19 0309 	adds.w	r3, r9, r9
 80032c4:	eb4a 040a 	adc.w	r4, sl, sl
 80032c8:	4699      	mov	r9, r3
 80032ca:	46a2      	mov	sl, r4
 80032cc:	eb19 090b 	adds.w	r9, r9, fp
 80032d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032e8:	4689      	mov	r9, r1
 80032ea:	4692      	mov	sl, r2
 80032ec:	eb1b 0509 	adds.w	r5, fp, r9
 80032f0:	eb4c 060a 	adc.w	r6, ip, sl
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f04f 0400 	mov.w	r4, #0
 8003306:	0094      	lsls	r4, r2, #2
 8003308:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800330c:	008b      	lsls	r3, r1, #2
 800330e:	461a      	mov	r2, r3
 8003310:	4623      	mov	r3, r4
 8003312:	4628      	mov	r0, r5
 8003314:	4631      	mov	r1, r6
 8003316:	f7fc ff5d 	bl	80001d4 <__aeabi_uldivmod>
 800331a:	4603      	mov	r3, r0
 800331c:	460c      	mov	r4, r1
 800331e:	461a      	mov	r2, r3
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <UART_SetConfig+0x6f4>)
 8003322:	fba3 1302 	umull	r1, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2164      	movs	r1, #100	; 0x64
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a09      	ldr	r2, [pc, #36]	; (800335c <UART_SetConfig+0x6f4>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4442      	add	r2, r8
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	e7ff      	b.n	800334a <UART_SetConfig+0x6e2>
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003354:	40011000 	.word	0x40011000
 8003358:	40011400 	.word	0x40011400
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4e0d      	ldr	r6, [pc, #52]	; (8003398 <__libc_init_array+0x38>)
 8003364:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003366:	1ba4      	subs	r4, r4, r6
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	2500      	movs	r5, #0
 800336c:	42a5      	cmp	r5, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	4e0b      	ldr	r6, [pc, #44]	; (80033a0 <__libc_init_array+0x40>)
 8003372:	4c0c      	ldr	r4, [pc, #48]	; (80033a4 <__libc_init_array+0x44>)
 8003374:	f000 f82c 	bl	80033d0 <_init>
 8003378:	1ba4      	subs	r4, r4, r6
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	2500      	movs	r5, #0
 800337e:	42a5      	cmp	r5, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003388:	4798      	blx	r3
 800338a:	3501      	adds	r5, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003392:	4798      	blx	r3
 8003394:	3501      	adds	r5, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	08003408 	.word	0x08003408
 800339c:	08003408 	.word	0x08003408
 80033a0:	08003408 	.word	0x08003408
 80033a4:	0800340c 	.word	0x0800340c

080033a8 <memcpy>:
 80033a8:	b510      	push	{r4, lr}
 80033aa:	1e43      	subs	r3, r0, #1
 80033ac:	440a      	add	r2, r1
 80033ae:	4291      	cmp	r1, r2
 80033b0:	d100      	bne.n	80033b4 <memcpy+0xc>
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033bc:	e7f7      	b.n	80033ae <memcpy+0x6>

080033be <memset>:
 80033be:	4402      	add	r2, r0
 80033c0:	4603      	mov	r3, r0
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d100      	bne.n	80033c8 <memset+0xa>
 80033c6:	4770      	bx	lr
 80033c8:	f803 1b01 	strb.w	r1, [r3], #1
 80033cc:	e7f9      	b.n	80033c2 <memset+0x4>
	...

080033d0 <_init>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr

080033dc <_fini>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr
